Complex querries :
------------------------

1) 
	1) db.audit.insert({x:1,y:2})
	2) db.audit.insert({x:1,y:2})
	3) db.audit.update({x:6},{$set : {x: 7}})
	4) db.audit.remove({x:7})
	5) db.audit.find().pretty().sort({$natural:-1})

2)	
	// insert records 
	for( var i = 1 ; i < 10000 ; i++){
    		db.accounts.insert({balance: i*10});
	}
	// search record
	db.accounts.find({balance : 10000}).explain()

	// create index 
	db.accounts.createIndex({balance:1})

	//to get execution stats
	db.accounts.find({balance : 10000}).explain("executionStats")
3)

	db.employees.aggregate([
		{$project : {"Name" :"$name" , "Salary" :"$salary" , "Department Name ": "$department.name"}},
		{$sort : {Salary : 1}},
		{$limit : 1}
	])
4)

	db.employees.aggregate([
		//{$project : {"Name" :"$name" , "Salary" :"$salary" , "DepartmentName ": "$department.name" , "Role" : "$role"} },
		{$group : {_id: "$department.name" , minSalary :{$min : "$salary"}}}
	])
5)
	db.employees.aggregate([
	    {$project : {"name" :"$name" , "salary" :"$salary" , "dpName": "$department.name" , "dpId" :"$department._id","role" : "$role"} },
	    {$match : {role : "Clerk"}},
	    {$sort : {salary : 1}}
	])

6)	// projection is skipped here 
	db.employees.aggregate([
   		{$match : { "department.name" : "Sales"}}
	])

7) 
8)
9)
10)
11)
12)
13)
14)
15)
16)
	db.employees.aggregate(
	    {$sort: {salary : 1}},
	    {$limit : 2},
	    {$skip : 1}
	)
17)
	db.employees.aggregate(
	    {$sort: {salary : -1}},
	    {$limit : 3}
	)
18)
